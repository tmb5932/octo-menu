: main
	:alias byte v0
	:alias scrollOffset v1
	:alias xPos v2
	:alias yPos v3
	:alias drawIndex v6
	:alias letterCount v7
	:alias optionsLength v8
	:alias temp v9
	:alias temp2 vA

	:const SCROLL_UP_KEY 2
	:const SCROLL_DOWN_KEY 5
	:const TITLE_LEN 11
	:const LEN_LOC 0x519
	:const DATA_LOC 0x520

	load-options

	i := LEN_LOC
	load byte
	optionsLength := byte
	optionsLength -= 1
	byte := 0

	scrollOffset := 0

	update-screen
	main-loop
	clear
	return

: main-loop

	# Select Option
	temp := 0xA
	# The chosen options ID is saved in the V5 register
	if temp key then return

	# Scroll Up
	temp := SCROLL_UP_KEY
	if temp key begin
		if scrollOffset > 0 begin
			scrollOffset -= 1
		else
			scrollOffset := optionsLength  # wrap around from start to end
		end
		waitKeyRelease
		update-screen
	end

	# Scroll Down
	temp := SCROLL_DOWN_KEY
	if temp key begin
		scrollOffset += 1
		if scrollOffset > optionsLength then scrollOffset := 0    # wrap around from end to start
		waitKeyRelease
		update-screen
	end

	jump main-loop

: update-screen
	clear
	draw-options
	draw-cursor
	return
	
: draw-options
	drawIndex := 0
	yPos := 7
	xPos := 10
	letterCount := 0

: drawloop
	i := DATA_LOC

	# multiply drawn options and start ID by 11 (each word is 11 chars long)
	temp := drawIndex
	temp += scrollOffset

	if scrollOffset == 0 begin
		if drawIndex == 0 begin
			xPos := 10
			yPos += 7
			letterCount := 0
			drawIndex += 1
			jump drawloop
		end
		if drawIndex >= 1 begin
			temp -= 1
		end
	end
	
	if scrollOffset != 0 then temp -= 1		# Need to -1 because scrollOffset points to middle word

	temp2 := TITLE_LEN
: mult_loop
  if temp == 0 then jump finished_mult
  i += temp2
  temp -= 1
  jump mult_loop
: finished_mult
	
	i += letterCount # add offset for letters written in current word

	load byte

	if byte == 0x00 then return		# End of list
	
	if letterCount >= 11 begin
		xPos := 10
		yPos += 7
		letterCount := 0
		drawIndex += 1
		if drawIndex < 3 then jump drawloop # Only draw 3 options on screen
		return
	end

	
	if byte == 0x20 begin		# Space slot
		letterCount += 1
		xPos += 5
		jump drawloop
	end

	byte -= 32         # Convert ASCII to 0â€“25 index

	i := asciiSprites
	i += byte
	i += byte
	i += byte
	i += byte
	i += byte		# 5 bytes per letter

	sprite xPos yPos 5

	letterCount += 1
	xPos += 5

	jump drawloop


: draw-cursor
	xPos := 5
	yPos := 14
	i := cursorSprite
	sprite xPos yPos 5  # Draw to point to middle letter
	return

: waitKeyRelease
	temp := 0
: -
	if temp key then jump -
	temp += 1
	if temp == 16 then return
	jump -
	return

: load-options
	# Start of imported data is 0x500
	i := LEN_LOC
	v0 := 7
	save v0
	
	i := DATA_LOC

	# Save JAZZ
  v0 := 0x4A  v1 := 0x41  v2 := 0x5A  v3 := 0x5A  v4 := 0x20  v5 := 0x20  v6 := 0x20  v7 := 0x20  v8 := 0x20  v9 := 0x20  va := 0x20
  save va

	# Save STRATEGY
  v0 := 0x53  v1 := 0x54  v2 := 0x52  v3 := 0x41  v4 := 0x54  v5 := 0x45  v6 := 0x47  v7 := 0x59  v8 := 0x20  v9 := 0x20  va := 0x20
  save va

	# Save DREAM
  v0 := 0x44  v1 := 0x52  v2 := 0x45  v3 := 0x41  v4 := 0x4D  v5 := 0x20  v6 := 0x20  v7 := 0x20  v8 := 0x20  v9 := 0x20  va := 0x20
  save va

	# Save PERFECTION
  v0 := 0x50  v1 := 0x45  v2 := 0x52  v3 := 0x46  v4 := 0x45  v5 := 0x43  v6 := 0x54  v7 := 0x49  v8 := 0x4F  v9 := 0x4E  va := 0x20
  save va

	# Save KNOWLEDGE
  v0 := 0x4B  v1 := 0x4E  v2 := 0x4F  v3 := 0x57  v4 := 0x4C  v5 := 0x45  v6 := 0x44  v7 := 0x47  v8 := 0x45  v9 := 0x20  va := 0x20
  save va

	# Save UNDERSTOOD
  v0 := 0x55  v1 := 0x4E  v2 := 0x44  v3 := 0x45  v4 := 0x52  v5 := 0x53  v6 := 0x54  v7 := 0x4F  v8 := 0x4F  v9 := 0x44  va := 0x20
  save va

	# Save WORLD
  v0 := 0x57  v1 := 0x4F  v2 := 0x52  v3 := 0x4C  v4 := 0x44  v5 := 0x20  v6 := 0x20  v7 := 0x20  v8 := 0x20  v9 := 0x20  va := 0x20
	save va

	return
	
: asciiSprites
	0x00 0x00 0x00 0x00 0x00	# space
	0x20 0x20 0x20 0x00 0x20	# !
	0x50 0x50 0x00 0x00 0x00	# "
	0x50 0xF8 0x50 0xF8 0x50	# #
	0x78 0xA0 0x70 0x28 0xF0	# $
	0xC8 0xD0 0x20 0x58 0x98	# %
	0x40 0xA0 0x40 0xA8 0x70	# &
	0x20 0x20 0x00 0x00 0x00	# '
	0x10 0x20 0x20 0x20 0x10	# (
	0x40 0x20 0x20 0x20 0x40	# )
	0x00 0x50 0x20 0x50 0x00	# *
	0x00 0x20 0x70 0x20 0x00	# +
	0x00 0x00 0x00 0x20 0x40	# ,
	0x00 0x00 0x70 0x00 0x00	# -
	0x00 0x00 0x00 0xC0 0xC0	# .
	0x10 0x20 0x40 0x80 0x00	# /
	0xF0 0x90 0x90 0x90 0xF0	# 0
 	0x20 0x60 0x20 0x20 0x70	# 1
	0xF0 0x10 0xF0 0x80 0xF0	# 2
	0xF0 0x10 0x70 0x10 0xF0	# 3
	0x90 0x90 0xF0 0x10 0x10	# 4
	0xF0 0x80 0xF0 0x10 0xF0	# 5
	0x70 0x80 0xF0 0x90 0x60	# 6
	0xF0 0x10 0x20 0x40 0x40	# 7
	0xE0 0xA0 0xE0 0xA0 0xE0	# 8
	0xE0 0xA0 0xE0 0x20 0x20	# 9
	0x00 0x40 0x00 0x40 0x00	# :
	0x00 0x40 0x00 0x40 0x80	# ;
	0x20 0x40 0x20 0x00 0x00	# <
	0xE0 0x00 0xE0 0x00 0x00	# =
	0x40 0x20 0x40 0x00 0x00	# >
	0xE0 0x20 0x40 0x00 0x40	# ? 
	0x00 0x00 0x60 0x00 0x00  # @ but currently -
	0xF0 0x90 0xF0 0x90 0x90	# A
	0xE0 0x90 0xE0 0x90 0xE0	# B
	0xF0 0x80 0x80 0x80 0xF0	# C
	0xE0 0x90 0x90 0x90 0xE0	# D
	0xF0 0x80 0xF0 0x80 0xF0	# E
	0xF0 0x80 0xF0 0x80 0x80	# F
	0xF0 0x80 0xB0 0x90 0xF0	# G
	0x90 0x90 0xF0 0x90 0x90	# H
	0x70 0x20 0x20 0x20 0x70	# I
	0x10 0x10 0x10 0x90 0x60	# J
	0x90 0xA0 0xC0 0xA0 0x90	# K
	0x80 0x80 0x80 0x80 0xF0	# L
	0x88 0xD8 0xA8 0x88 0x88	# M
	0x90 0xD0 0xF0 0xB0 0x90	# N
	0xF0 0x90 0x90 0x90 0xF0	# O
	0xF0 0x90 0xF0 0x80 0x80	# P
	0xF0 0x90 0x90 0xB0 0xD0	# Q
	0xF0 0x90 0xF0 0xA0 0x90	# R
	0xF0 0x80 0xF0 0x10 0xF0	# S
	0xF8 0x20 0x20 0x20 0x20	# T
	0x90 0x90 0x90 0x90 0xF0	# U
	0x90 0x90 0x90 0x90 0x60	# V
	0x90 0x90 0xF0 0xF0 0x90	# W
	0x90 0x90 0x60 0x90 0x90	# X
	0x90 0x90 0x60 0x20 0x20	# Y
	0xF0 0x10 0x60 0x80 0xF0	# Z

: cursorSprite
	0b10000000
	0b11000000
	0b11100000
	0b11000000
	0b10000000
