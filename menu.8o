: main
	:alias byte v0
	:alias selected v1
	:alias xPos v2
	:alias yPos v3
	:alias drawIndex v4
	:alias letterCount v5
	:alias optionsLength v6
	:alias temp v7
	:alias temp2 v8
	:alias offset v9
	:alias offsetMultiple vA

	:const SELECT_KEY 0xA
	:const SCROLL_UP_KEY 2
	:const SCROLL_DOWN_KEY 8
	:const dataLoc 0x500
	:const optionSeperator 0x06
	:const endOfOptions 0x00

	# Count number of options loaded
	count-options

  optionsLength -= 1 # Swap counter to 0-index
	
	# Ensure zero'ed
	byte := 0
	selected := 0

	# Set initial visuals
	update-screen
	
	# Loop
	main-loop
	return

: main-loop
	# Select Currently Hovered Option
	temp := SELECT_KEY
	# The chosen options ID is saved in the V1 register
	if temp key then return

	# Scroll Up
	temp := SCROLL_UP_KEY
	if temp key begin
		if selected > 0 begin
			selected -= 1
		else
			selected := optionsLength  # wrap around from start to end
		end
		wait-key-release
		update-screen
	end

	# Scroll Down
	temp := SCROLL_DOWN_KEY
	if temp key begin
		selected += 1
		if selected > optionsLength then selected := 0	# wrap around from end to start
		wait-key-release
		update-screen
	end

	jump main-loop

: update-screen
	clear
	draw-options
	draw-cursor
	return

: draw-options
	drawIndex := 0
	yPos := 7
	xPos := 10
	letterCount := 0
	i := dataLoc

: draw-loop
	# If this is first cycle in drawing screen
	if drawIndex != 0 then jump end-draw-prep
	if letterCount != 0 then jump end-draw-prep

	# Reset offset
	offset := 0
	offsetMultiple := 0

	if selected == 0 then jump end-draw-prep
	temp := selected
	temp -= 1

: find-preload-loop
	if temp == 0 then jump end-draw-prep
	load byte
	if offset != 255 then jump no-overflow
	offset := 0
	offsetMultiple += 1
: no-overflow
	offset += 1
	if byte == optionSeperator then temp -= 1	# Found end of word
	if byte == endOfOptions then return	# Found end of options
	jump find-preload-loop

: end-draw-prep

	i := dataLoc

	temp := offsetMultiple
	temp2 := 255
: multiply-loop
	if temp == 0 then jump multiply-end
	i += temp2
	temp -= 1
	jump multiply-loop
: multiply-end

	i += offset

	# go to the drawIndex'th ACK byte to find start of next option
	temp := drawIndex

	# If drawing first option, there is no previous, so need to have blank top row
	if selected == 0 begin
		if drawIndex == 0 begin
			xPos := 10
			yPos += 7
			letterCount := 0
			drawIndex += 1
			jump draw-loop
		end
		temp -= 1
	end

: find-option-loop
  if temp == 0 then jump finished-option-loop
	load byte
	if byte == optionSeperator then temp -= 1
	if byte == endOfOptions then return
  jump find-option-loop
: finished-option-loop

	i += letterCount	# add offset for letters written in current option

	load byte
	
	if byte == endOfOptions then return	# End of list

	if byte == optionSeperator begin
		xPos := 10
		yPos += 7
		letterCount := 0
		drawIndex += 1
		if drawIndex < 3 then jump draw-loop	# Only draw 3 options on screen
		return
	end

	if byte == 0x20 begin	# Space character
		letterCount += 1
		xPos += 3
		jump draw-loop
	end

	# Catch any possible issues with ascii character
	if byte >= 97 begin
		if byte <= 122 then byte -= 32	# If it is a lowercase letter, turn into uppercase version
	end

	if byte == 95 then byte := 45	# Turn underscores (_) into dashes (-)

	if byte < 32 then byte := 63	# If unsupported char, set to '?'

	if byte > 90 then byte := 63	# If unsupported char, set to '?'

	byte -= 32	# Convert ASCII to space (32) == 0 index (0-59)

	i := asciiSprites
	i += byte
	i += byte
	i += byte
	i += byte
	i += byte		# 5 bytes per letter

	sprite xPos yPos 5

	letterCount += 1
	xPos += 5

	jump draw-loop

: draw-cursor
	xPos := 5
	yPos := 14
	i := cursorSprite
	sprite xPos yPos 5  # Draw to point to middle option
	return

# function to wait for key release to avoid zooming through list (checks every key)
: wait-key-release
	temp := 0
: -
	if temp key then jump -
	temp += 1
	if temp == 16 then return
	jump -
	return

: count-options
	optionsLength := 0
	i := dataLoc

: count-loop
	load byte
	if byte == endOfOptions then return	# End of options
	if byte == optionSeperator then optionsLength += 1

	jump count-loop
	
# Sprites for each ascii character 32 to 90
: asciiSprites
	0x00 0x00 0x00 0x00 0x00	# space
	0x20 0x20 0x20 0x00 0x20	# !
	0x50 0x50 0x00 0x00 0x00	# "
	0x50 0xF8 0x50 0xF8 0x50	# #
	0x78 0xA0 0x70 0x28 0xF0	# $
	0xC8 0xD0 0x20 0x58 0x98	# %
	0x40 0xA0 0x40 0xA8 0x70	# &
	0x20 0x20 0x00 0x00 0x00	# '
	0x10 0x20 0x20 0x20 0x10	# (
	0x40 0x20 0x20 0x20 0x40	# )
	0x00 0x50 0x20 0x50 0x00	# *
	0x00 0x20 0x70 0x20 0x00	# +
	0x00 0x00 0x00 0x20 0x40	# ,
	0x00 0x00 0x70 0x00 0x00	# -
	0x00 0x00 0x00 0xC0 0xC0	# .
	0x10 0x20 0x40 0x80 0x00	# /
	0xF0 0x90 0x90 0x90 0xF0	# 0
 	0x20 0x60 0x20 0x20 0x70	# 1
	0xF0 0x10 0xF0 0x80 0xF0	# 2
	0xF0 0x10 0x70 0x10 0xF0	# 3
	0x90 0x90 0xF0 0x10 0x10	# 4
	0xF0 0x80 0xF0 0x10 0xF0	# 5
	0x70 0x80 0xF0 0x90 0x60	# 6
	0xF0 0x10 0x20 0x40 0x40	# 7
	0xE0 0xA0 0xE0 0xA0 0xE0	# 8
	0xE0 0xA0 0xE0 0x20 0x20	# 9
	0x00 0x40 0x00 0x40 0x00	# :
	0x00 0x40 0x00 0x40 0x80	# ;
	0x20 0x40 0x20 0x00 0x00	# <
	0xE0 0x00 0xE0 0x00 0x00	# =
	0x40 0x20 0x40 0x00 0x00	# >
	0xE0 0x20 0x40 0x00 0x40	# ? 
	0x70 0x88 0xA8 0x98 0x60  # @
	0xF0 0x90 0xF0 0x90 0x90	# A
	0xE0 0x90 0xE0 0x90 0xE0	# B
	0xF0 0x80 0x80 0x80 0xF0	# C
	0xE0 0x90 0x90 0x90 0xE0	# D
	0xF0 0x80 0xF0 0x80 0xF0	# E
	0xF0 0x80 0xF0 0x80 0x80	# F
	0xF0 0x80 0xB0 0x90 0xF0	# G
	0x90 0x90 0xF0 0x90 0x90	# H
	0x70 0x20 0x20 0x20 0x70	# I
	0x10 0x10 0x10 0x90 0x60	# J
	0x90 0xA0 0xC0 0xA0 0x90	# K
	0x80 0x80 0x80 0x80 0xF0	# L
	0x88 0xD8 0xA8 0x88 0x88	# M
	0x90 0xD0 0xF0 0xB0 0x90	# N
	0xF0 0x90 0x90 0x90 0xF0	# O
	0xF0 0x90 0xF0 0x80 0x80	# P
	0xF0 0x90 0x90 0xB0 0xD0	# Q
	0xF0 0x90 0xF0 0xA0 0x90	# R
	0xF0 0x80 0xF0 0x10 0xF0	# S
	0xF8 0x20 0x20 0x20 0x20	# T
	0x90 0x90 0x90 0x90 0xF0	# U
	0x90 0x90 0x90 0x90 0x60	# V
	0x90 0x90 0xF0 0xF0 0x90	# W
	0x90 0x90 0x60 0x90 0x90	# X
	0x90 0x90 0x60 0x20 0x20	# Y
	0xF0 0x10 0x60 0x80 0xF0	# Z

: cursorSprite
	0b10000000
	0b11000000
	0b11100000
	0b11000000
	0b10000000
