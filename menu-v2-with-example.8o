: main
	:alias byte v0
	:alias scrollOffset v1
	:alias xPos v2
	:alias yPos v3
	:alias drawIndex v4
	:alias letterCount v5
	:alias optionsLength v6
	:alias temp v7

	:const dataLoc 0x500
	load-options
	count-options
	
  optionsLength -= 1 # Swap to 0-index
	byte := 0

	scrollOffset := 0

	update-screen
	main-loop
	clear
	return

: main-loop
	# Select Option
	temp := 0xA
	# The chosen options ID is saved in the V1 register
	if temp key then return

	# Scroll Up
	temp := 2
	if temp key begin
		if scrollOffset > 0 begin
			scrollOffset -= 1
		else
			scrollOffset := optionsLength  # wrap around from start to end
		end
		wait-key-release
		update-screen
	end

	# Scroll Down
	temp := 5
	if temp key begin
		scrollOffset += 1
		if scrollOffset > optionsLength then scrollOffset := 0    # wrap around from end to start
		wait-key-release
		update-screen
	end

	jump main-loop

: update-screen
	clear
	draw-options
	draw-cursor
	return
	
: draw-options
	drawIndex := 0
	yPos := 7
	xPos := 10
	letterCount := 0

: draw-loop
	i := dataLoc

	# find scrollOffset + drawIndex number of ack bits to find next word
	temp := drawIndex
	temp += scrollOffset

	if scrollOffset == 0 begin	# If drawing first option, there is no previous, so need to have blank top row
		if drawIndex == 0 begin
			xPos := 10
			yPos += 7
			letterCount := 0
			drawIndex += 1
			jump draw-loop
		end
		if drawIndex >= 1 begin
			temp -= 1
		end
	end
	
	if scrollOffset != 0 then temp -= 1		# Need to -1 because scrollOffset points to middle title

: find-title-loop
  if temp == 0 then jump finished-title-loop
	load byte
	if byte == 0x06 then temp -= 1
	if byte == 0x00 then return
  jump find-title-loop
: finished-title-loop

	i += letterCount # add offset for letters written in current word

	load byte

	if byte == 0x00 then return		# End of list

	if byte == 0x06 begin # ack bit to seperate words
		xPos := 10
		yPos += 7
		letterCount := 0
		drawIndex += 1
		if drawIndex < 3 then jump draw-loop # Only draw 3 options on screen
		return
	end
	
	if byte == 0x20 begin		# Space slot
		letterCount += 1
		xPos += 3
		jump draw-loop
	end

	byte -= 32         # Convert ASCII to 0â€“58 index

	i := asciiSprites
	i += byte
	i += byte
	i += byte
	i += byte
	i += byte		# 5 bytes per letter

	sprite xPos yPos 5

	letterCount += 1
	xPos += 5

	jump draw-loop

: draw-cursor
	xPos := 5
	yPos := 14
	i := cursorSprite
	sprite xPos yPos 5  # Draw to point to middle option
	return

: wait-key-release
	temp := 0
: -
	if temp key then jump -
	temp += 1
	if temp == 16 then return
	jump -
	return

: count-options
	optionsLength := 0
	i := dataLoc

: count-loop
	load byte
	if byte == 0x00 then return
	if byte == 0x06 then optionsLength += 1

	jump count-loop

: load-options
	i := dataLoc

  # Save JAZZ
  v0 := 0x4A  v1 := 0x41  v2 := 0x5A  v3 := 0x5A  v4 := 0x06
  save v4

  # Save STRATEGY
  v0 := 0x53  v1 := 0x54  v2 := 0x52  v3 := 0x41  v4 := 0x54  v5 := 0x45  v6 := 0x47  v7 := 0x59  v8 := 0x06
  save v8

  # Save DREAM
  v0 := 0x44  v1 := 0x52  v2 := 0x45  v3 := 0x41  v4 := 0x4D  v5 := 0x06
  save v5

  # Save PERFECTION
  v0 := 0x50  v1 := 0x45  v2 := 0x52  v3 := 0x46  v4 := 0x45  v5 := 0x43  v6 := 0x54  v7 := 0x49  v8 := 0x4F  v9 := 0x4E  va := 0x06
  save va

  # Save KNOWLEDGE
  v0 := 0x4B  v1 := 0x4E  v2 := 0x4F  v3 := 0x57  v4 := 0x4C  v5 := 0x45  v6 := 0x44  v7 := 0x47  v8 := 0x45  v9 := 0x06
  save v9

  # Save UNDERSTOOD
  v0 := 0x55  v1 := 0x4E  v2 := 0x44  v3 := 0x45  v4 := 0x52  v5 := 0x53  v6 := 0x54  v7 := 0x4F  v8 := 0x4F  v9 := 0x44  va := 0x06
  save va

  # Save WORLD
  v0 := 0x57  v1 := 0x4F  v2 := 0x52  v3 := 0x4C  v4 := 0x44  v5 := 0x06
	save v5

	return

: asciiSprites
	0x00 0x00 0x00 0x00 0x00	# space (ascii 32)
	0x20 0x20 0x20 0x00 0x20	# !
	0x50 0x50 0x00 0x00 0x00	# "
	0x50 0xF8 0x50 0xF8 0x50	# #
	0x78 0xA0 0x70 0x28 0xF0	# $
	0xC8 0xD0 0x20 0x58 0x98	# %
	0x40 0xA0 0x40 0xA8 0x70	# &
	0x20 0x20 0x00 0x00 0x00	# '
	0x10 0x20 0x20 0x20 0x10	# (
	0x40 0x20 0x20 0x20 0x40	# )
	0x00 0x50 0x20 0x50 0x00	# *
	0x00 0x20 0x70 0x20 0x00	# +
	0x00 0x00 0x00 0x20 0x40	# ,
	0x00 0x00 0x70 0x00 0x00	# -
	0x00 0x00 0x00 0xC0 0xC0	# .
	0x10 0x20 0x40 0x80 0x00	# /
	0xF0 0x90 0x90 0x90 0xF0	# 0
 	0x20 0x60 0x20 0x20 0x70	# 1
	0xF0 0x10 0xF0 0x80 0xF0	# 2
	0xF0 0x10 0x70 0x10 0xF0	# 3
	0x90 0x90 0xF0 0x10 0x10	# 4
	0xF0 0x80 0xF0 0x10 0xF0	# 5
	0x70 0x80 0xF0 0x90 0x60	# 6
	0xF0 0x10 0x20 0x40 0x40	# 7
	0xE0 0xA0 0xE0 0xA0 0xE0	# 8
	0xE0 0xA0 0xE0 0x20 0x20	# 9
	0x00 0x40 0x00 0x40 0x00	# :
	0x00 0x40 0x00 0x40 0x80	# ;
	0x20 0x40 0x20 0x00 0x00	# <
	0xE0 0x00 0xE0 0x00 0x00	# =
	0x40 0x20 0x40 0x00 0x00	# >
	0xE0 0x20 0x40 0x00 0x40	# ? 
	0x00 0x00 0x60 0x00 0x00  # @ but currently -
	0xF0 0x90 0xF0 0x90 0x90	# A
	0xE0 0x90 0xE0 0x90 0xE0	# B
	0xF0 0x80 0x80 0x80 0xF0	# C
	0xE0 0x90 0x90 0x90 0xE0	# D
	0xF0 0x80 0xF0 0x80 0xF0	# E
	0xF0 0x80 0xF0 0x80 0x80	# F
	0xF0 0x80 0xB0 0x90 0xF0	# G
	0x90 0x90 0xF0 0x90 0x90	# H
	0x70 0x20 0x20 0x20 0x70	# I
	0x10 0x10 0x10 0x90 0x60	# J
	0x90 0xA0 0xC0 0xA0 0x90	# K
	0x80 0x80 0x80 0x80 0xF0	# L
	0x88 0xD8 0xA8 0x88 0x88	# M
	0x90 0xD0 0xF0 0xB0 0x90	# N
	0xF0 0x90 0x90 0x90 0xF0	# O
	0xF0 0x90 0xF0 0x80 0x80	# P
	0xF0 0x90 0x90 0xB0 0xD0	# Q
	0xF0 0x90 0xF0 0xA0 0x90	# R
	0xF0 0x80 0xF0 0x10 0xF0	# S
	0xF8 0x20 0x20 0x20 0x20	# T
	0x90 0x90 0x90 0x90 0xF0	# U
	0x90 0x90 0x90 0x90 0x60	# V
	0x90 0x90 0xF0 0xF0 0x90	# W
	0x90 0x90 0x60 0x90 0x90	# X
	0x90 0x90 0x60 0x20 0x20	# Y
	0xF0 0x10 0x60 0x80 0xF0	# Z (ascii 90)

: cursorSprite
	0b10000000
	0b11000000
	0b11100000
	0b11000000
	0b10000000
