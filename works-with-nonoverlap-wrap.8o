: main

	load-options

	:alias byte v0
	:alias optionIndex v1
	:alias xPos v2
	:alias yPos v3
	:alias letterIndex v4
	:alias scrollOffset v5
	:alias drawIndex v6
	:alias letterCount v7
	:alias optionsLength v8
	:alias temp v9
	:alias temp2 vA
	:const TITLE_LEN 11
	:const lenLoc 0x499
	:const dataLoc 0x500

	i := lenLoc
	load byte
	optionsLength := byte
	optionsLength -= 1
	byte := 0

	scrollOffset := 0

	update-screen
	main-loop
	clear
	return

: main-loop

	# Select Option
	temp := 0xA
	# The chosen options ID is saved in the V5 register
	if temp key then return

	# Scroll Up
	temp := 2
	if temp key begin
		if scrollOffset > 0 begin
			scrollOffset -= 1
		else
			scrollOffset := optionsLength  # wrap around from start to end
		end
		waitKeyRelease
		update-screen
	end

	# Scroll Down
	temp := 5
	if temp key begin
		scrollOffset += 1
		if scrollOffset > optionsLength then scrollOffset := 0    # wrap around from end to start
		waitKeyRelease
		update-screen
	end

	jump main-loop

: update-screen
	clear
	draw-options
	draw-cursor
	return

	
: draw-options
	drawIndex := 0
	yPos := 7
	xPos := 10
	letterCount := 0

: drawloop
	i := dataLoc

	# multiply drawn options and start ID by 11 (each word is 11 chars long)
	temp := drawIndex
	temp += scrollOffset

	if scrollOffset == 0 begin
		if drawIndex == 0 begin
			xPos := 10
			yPos += 7
			letterCount := 0
			drawIndex += 1
			jump drawloop
		end
		if drawIndex >= 1 begin
			temp -= 1
		end
	end
	
	if scrollOffset != 0 then temp -= 1		# Need to -1 because scrollOffset points to middle word

	temp2 := TITLE_LEN
: mult_loop
  if temp == 0 then jump finished_mult
  i += temp2
  temp -= 1
  jump mult_loop
: finished_mult
	
	i += letterCount # add offset for letters written in current word

	load byte

	if byte == 0x00 then return		# End of list
	
	if letterCount >= 11 begin
		xPos := 10
		yPos += 7
		letterCount := 0
		drawIndex += 1
		if drawIndex < 3 then jump drawloop # Only draw 3 options on screen
		return
	end

	
	if byte == 0x06 begin		# Blank slot
		letterCount += 1
		xPos += 5
		jump drawloop
	end

	byte -= 65         # Convert ASCII to 0â€“25 index

	i := alphabetSprites
	i += byte
	i += byte
	i += byte
	i += byte
	i += byte		# 5 bytes per letter

	sprite xPos yPos 5

	if letterCount >= 10 begin
		xPos := 10
		yPos += 7
		letterCount := 0
		drawIndex += 1
		
		if drawIndex < 3 then jump drawloop # Only draw 3 letters on screen
		
		: spec
		jump spec
		return
	end

	letterCount += 1
	xPos += 5

	jump drawloop


: draw-cursor
	xPos := 5
	yPos := 14
	i := cursorSprite
	sprite xPos yPos 5  # Draw to point to middle letter
	return

: waitKeyRelease
	temp := 0
: -
	if temp key then jump -
	temp += 1
	if temp == 16 then return
	jump -
	return
	
: load-options
	# Start of imported data is 0x500
	i := lenLoc
	v0 := 7
	save v0
	
	
	i := dataLoc

  v0 := 0x4A  v1 := 0x41  v2 := 0x5A  v3 := 0x5A  v4 := 0x06  v5 := 0x06  v6 := 0x06  v7 := 0x06  v8 := 0x06  v9 := 0x06  va := 0x06
  save va

  v0 := 0x53  v1 := 0x54  v2 := 0x52  v3 := 0x41  v4 := 0x54  v5 := 0x45  v6 := 0x47  v7 := 0x59  v8 := 0x06  v9 := 0x06  va := 0x06
  save va

  v0 := 0x44  v1 := 0x52  v2 := 0x45  v3 := 0x41  v4 := 0x4D  v5 := 0x06  v6 := 0x06  v7 := 0x06  v8 := 0x06  v9 := 0x06  va := 0x06
  save va

  v0 := 0x50  v1 := 0x45  v2 := 0x52  v3 := 0x46  v4 := 0x45  v5 := 0x43  v6 := 0x54  v7 := 0x49  v8 := 0x4F  v9 := 0x4E  va := 0x06
  save va

  v0 := 0x4B  v1 := 0x4E  v2 := 0x4F  v3 := 0x57  v4 := 0x4C  v5 := 0x45  v6 := 0x44  v7 := 0x47  v8 := 0x45  v9 := 0x06  va := 0x06
  save va

  v0 := 0x55  v1 := 0x4E  v2 := 0x44  v3 := 0x45  v4 := 0x52  v5 := 0x53  v6 := 0x54  v7 := 0x4F  v8 := 0x4F  v9 := 0x44  va := 0x06
  save va

  v0 := 0x57  v1 := 0x4F  v2 := 0x52  v3 := 0x4C  v4 := 0x44  v5 := 0x06  v6 := 0x06  v7 := 0x06  v8 := 0x06  v9 := 0x06  va := 0x06
  save va

	return
	
: alphabetSprites
: A
	0xF0 0x90 0xF0 0x90 0x90	# A
: B
	0xE0 0x90 0xE0 0x90 0xE0	# B
: C
	0xF0 0x80 0x80 0x80 0xF0	# C
: D
	0xE0 0x90 0x90 0x90 0xE0	# D
: E
	0xF0 0x80 0xF0 0x80 0xF0	# E
: F
	0xF0 0x80 0xF0 0x80 0x80	# F
: G
	0xF0 0x80 0xB0 0x90 0xF0	# G
: H
	0x90 0x90 0xF0 0x90 0x90	# H
: I
	0xF0 0x20 0x20 0x20 0xF0	# I
: J
	0x10 0x10 0x10 0x90 0x60	# J
: K
	0x90 0xA0 0xC0 0xA0 0x90	# K
: L
	0x80 0x80 0x80 0x80 0xF0	# L
: M
	0x90 0xF0 0xF0 0x90 0x90	# M
: N
	0x90 0xD0 0xF0 0xB0 0x90	# N
: O
	0xF0 0x90 0x90 0x90 0xF0	# O
: P
	0xF0 0x90 0xF0 0x80 0x80	# P
: Q
	0xF0 0x90 0x90 0xB0 0xD0	# Q
: R
	0xF0 0x90 0xF0 0xA0 0x90	# R
: S
	0xF0 0x80 0xF0 0x10 0xF0	# S
: T
	0xF8 0x20 0x20 0x20 0x20	# T
: U
	0x90 0x90 0x90 0x90 0xF0	# U
: V
	0x90 0x90 0x90 0x90 0x60	# V
: W
	0x90 0x90 0xF0 0xF0 0x90	# W
: X
	0x90 0x90 0x60 0x90 0x90	# X
: Y
	0x90 0x90 0x60 0x20 0x20	# Y
: Z
	0xF0 0x10 0x60 0x80 0xF0	# Z

: cursorSprite
	0b10000000
	0b11000000
	0b11100000
	0b11000000
	0b10000000
